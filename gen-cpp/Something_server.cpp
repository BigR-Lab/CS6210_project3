// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Something.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <curl/curl.h>
#include <stdlib.h>
#include <stdio.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Test;
using namespace std;

string data;

size_t write_to_string(char *buf, size_t size, size_t count, void *stream) {
	for (unsigned int c = 0; c < size*count; c++){
		data.push_back(buf[c]);
	}
	return size*count;
}

class SomethingHandler : virtual public SomethingIf {
 public:
  SomethingHandler() {
    printf("Caching Server Started!\n");
  }

	int32_t ping() {
		// Your implementation goes here
		cout << "ping" << endl;

		return 1;
	}

	void request(string& _return, const Url_req& req) {
		
		CURL   *curl;
		curl = curl_easy_init();
		_return = "ERROR";
	
		if (curl) {
			curl_easy_setopt(curl, CURLOPT_URL, req.url.c_str());

			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &write_to_string);
			//curl_easy_setopt(curl, CURLOPT_WRITEDATA, &_return);

			curl_easy_perform(curl);
			
			cout << "URL Requested: " << req.url << endl;
			_return = data;
		
			curl_easy_cleanup(curl);    					
			data.clear(); 
		} else {
			cout << "Failed to init curl!" << endl;
		}

	}

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SomethingHandler> handler(new SomethingHandler());
  shared_ptr<TProcessor> processor(new SomethingProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

