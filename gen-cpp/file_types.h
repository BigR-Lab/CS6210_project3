/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef file_TYPES_H
#define file_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Test {

class Url_req;

typedef struct _Url_req__isset {
  _Url_req__isset() : url(false), force(false) {}
  bool url :1;
  bool force :1;
} _Url_req__isset;

class Url_req {
 public:

  Url_req(const Url_req&);
  Url_req& operator=(const Url_req&);
  Url_req() : url(), force(0) {
  }

  virtual ~Url_req() throw();
  std::string url;
  int32_t force;

  _Url_req__isset __isset;

  void __set_url(const std::string& val);

  void __set_force(const int32_t val);

  bool operator == (const Url_req & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    if (!(force == rhs.force))
      return false;
    return true;
  }
  bool operator != (const Url_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Url_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Url_req &a, Url_req &b);

inline std::ostream& operator<<(std::ostream& out, const Url_req& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
